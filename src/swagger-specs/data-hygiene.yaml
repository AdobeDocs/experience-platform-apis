openapi: 3.0.3
info:
  title: Data Hygiene API
  description: >
    Use the Data Hygiene REST API to schedule expiration dates for datasets and programmatically correct or delete stored customer personal data in Experience Platform.

    - **Related documentation**:
      - [Advanced Data Lifecycle Management overview](https://experienceleague.adobe.com/en/docs/experience-platform/data-lifecycle/home)
      - [Quota endpoint](https://experienceleague.adobe.com/en/docs/experience-platform/data-lifecycle/api/quota)
      - [workorder endpoint](https://experienceleague.adobe.com/en/docs/experience-platform/data-lifecycle/api/workorder)
      - [Dataset expiration endpoint](https://experienceleague.adobe.com/en/docs/experience-platform/data-lifecycle/api/dataset-expiration)

    - **Visualize API calls with Postman (a free, third-party software)**:
      * [Video guide for creating the Postman environment](https://video.tv.adobe.com/v/28832)
      * [Steps for importing environments and collections in Postman](https://learning.getpostman.com/docs/postman/collection_runs/using_environments_in_collection_runs/)
  
    - **API paths**:
      * PLATFORM Gateway URL: https://<span>platform.adobe.io
      * Base path for this API: /data/core/hygiene/
      * Example of a complete path for making a call to "/ttl": https://<span>platform.adobe.io/data/core/hygiene/ttl
    
    - **Required headers**:
      * All calls require the headers `Authorization`, `x-gw-ims-org-id`, and `x-api-key`. For more information on how to obtain these values, see the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
      * All resources in Experience Platform are isolated to specific virtual sandboxes. All requests to Platform APIs require the header `x-sandbox-name` whose value is the all-lowercase name of the sandbox the operation will take place in (for example, "prod"). See the [sandboxes overview](https://adobe.com/go/sandbox-overview-en) for more information.
      * All requests with a payload in the request body (such as POST, PUT, and PATCH calls) must include the header `Content-Type` with a value of `application/json`.

    - **API error handling**:
      * Refer to the Experience Platform API troubleshooting guide for [FAQs](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#faq), [API status codes](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#api-status-codes), and [request header errors](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#request-header-errors).

# Q) Is the sandbox name header required in all calls to Platform APIs? It is not used in the wiki.
# https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=DMSArchitecture&title=Hygiene+Customer+API#HygieneCustomerAPI-CreateaDatasetTTL

# UPDATE THE DESCRIPTION TO INCLUDE a postman collection when one exists. It should be listed on the lik below. 
# * [Data Hygiene API Postman collection on GitHub](https://github.com/adobe/experience-platform-postman-samples/blob/master/apis/experience-platform/Schema%20Registry%20API.postman_collection.json)
  version: 1.0.0

servers:
  - url: https://platform.adobe.io
tags: 
- name: (NEW) Interactive API documentation
  description: You can now interact with the Experience Platform API endpoints directly from this API reference page. Get 
    your [authentication credentials](http://www.adobe.com/go/platform-api-authentication-en) and use the **Try it** 
    functionality in the right rail. Note that by using this functionality, you are making real API calls. Keep this in mind 
    when you interact with production sandboxes.
- name: Quota
  description: >
    Use the `/quota` endpoint in the Data Hygiene API to monitor your Advanced data lifecycle management usage against your 
    organization’s quota limits for each job type.

    Quotas are enforced for each Data Lifecycle job type in the following ways:

      * Record deletes and updates are limited to a certain number of requests each month.
      * Dataset expirations have a flat limit for the number of concurrently active jobs, regardless of when the expirations will be executed.
- name: Dataset Expiration
  description: >
    Use the `/ttl` endpoint to schedule expiration dates for datasets in Adobe Experience Platform.

    A dataset expiration is a timed-delayed delete operation. The dataset is not protected in the interim, so it may be be deleted by other means before its expiry is reached.
    At any time before the dataset-delete is actually initiated, you can cancel the expiration or modify its trigger time. After cancelling a dataset expiration, you can reopen it by setting a new expiry.
    Once the dataset deletion is initiated, its expiration job will be marked as `executing`, and it may not be further altered. The dataset itself may be recoverable for up to seven days, but only through a manual process initiated through an Adobe service request. 
- name: Record Delete
  description: >
    Use the `/workorder` endpoint in the Data Hygiene API to programmatically manage record delete requests in Adobe 
    Experience Platform.

paths:
  /quota:
    get:
      tags:
        - Quota
      summary: List your data hygiene quotas
      description: >
        Use the /quota endpoint in the Data Hygiene API to monitor your Advanced data lifecycle management usage against your organization’s quota limits for each job type.

        Quotas are enforced for each data lifecycle job type in the following ways:

        - Record deletes and updates are limited to a certain number of requests each month.
        - Dataset expirations have a flat limit for the number of concurrently active jobs, regardless of when the expirations will be executed.
      operationId: listQuotas
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/quotaType'
      responses:
        200:
          x-summary: "Success"
          description: "Returns the details of your data lifecycle quotas."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quotaResponse"
        400:
          x-summary: Bad Request
          description: > 
            The response typically indicates that there was a problem with the request made to a server. 
            This is often due to incorrect syntax or missing information, for example an IMS-Org-Id header missing from the request.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request cannot be processed due to invalid syntax or missing information."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Access Denied. The user is not authorized to make the request."
        403:
          x-summary: Forbidden
          description: >
            You have been denied access to a resource due to lack of proper authorization or permissions.
          content: 
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "Access to the requested resource is forbidden."
        404:
          x-summary: Not Found
          description: Occurs if the quota cannot be found.
          content: 
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested resource could not be found."

  /ttl:
    get:
      tags:
        - Dataset Expiration
      summary: List your dataset expirations
      description: >
        Retrieve a list of your organization's dataset expirations by making
        a GET request to the `/ttl` endpoint. You can list all dataset expirations for your organization by making 
        a GET request. Query parameters can be used to filter the response for appropriate results.
      operationId: listTtl
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/datasetName'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/displayName'
        - $ref: '#/components/parameters/expiryDate'
        - $ref: '#/components/parameters/expiryToDate'
        - $ref: '#/components/parameters/expiryFromDate'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/orgId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sandboxName'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/updatedDate'
        - $ref: '#/components/parameters/updatedFromDate'
        - $ref: '#/components/parameters/updatedToDate'
        # Q) is sandbox-name needed. It says so in ExL. Is that a mistake?
      responses:
        200:
          x-summary: "Success"
          description: "Returns the details of your dataset expirations."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ttlResponseMultiple"
        400:
          x-summary: Bad Request
          description: > 
            The response typically indicates that there was a problem with the request made to a server. 
            This is often due to incorrect syntax or missing information, for example an IMS-Org-Id header missing from the request.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request cannot be processed due to invalid syntax or missing information."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Access Denied. The user is not authorized to make the request."
        403:
          x-summary: Forbidden
          description: >
            You have been denied access to a resource due to lack of proper authorization or permissions.
          content: 
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "Access to the requested resource is forbidden."
        404:
          x-summary: Not Found
          description: Occurs if the dataset expiration cannot be found.
          content: 
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested resource could not be found."

    post:
      tags:
        - Dataset Expiration
      summary: Create a dataset expiration
      description: >
        "Use this endpoint to schedule a new dataset expiration. Specify the dataset ID and the expiry date and 
        time (in ISO 8601 format) to ensure data is removed from the system after the specified period. 
        To create a dataset expiration, send a POST request to this endpoint with the required values in the payload."
      operationId: createTtl
      requestBody:
        description: A JSON payload containing the details of the dataset expiration to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ttlPostPayload'
      responses:
        201:
          x-summary: Created
          description: "A new dataset expiration was successfully created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ttlResponseSingle"
        400:
          x-summary: Bad Request
          description: >
            This can occur if the JSON payload is invalid or missing required fields.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request payload is invalid or missing required fields."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Authentication credentials are missing or invalid."
        403:
          x-summary: Forbidden
          description: >
            This can occur if you do not have the necessary permissions to perform this action.
          content:
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "User does not have the necessary permissions."
        500:
          x-summary: Internal server error
          description: >
            This can occur if there is an issue on the server while processing the request.
          content:
            application/json:
              example:
                error_code: "500 INTERNAL SERVER ERROR"
                message: "An internal server error occurred while processing the request."

  /ttl/{ID}:
    get:
      tags:
        - Dataset Expiration
      summary: Retrieve a specific dataset expiration
      description: >
        Use this endpoint to retrieve the details of a specific dataset expiration by providing its expiration ID or dataset ID.
      operationId: getTtl
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/ttlOrDatasetId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/productStatusDetails'
        # Q) ExL states that Sandbox name rather than the Accept header is required. Which is correct?
      responses:
        200:
          x-summary: "Success"
          description: "Returns the details of the specified dataset expiration."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ttlResponseSingle"
        400:
          x-summary: Bad Request
          description: >
            The response typically indicates that there was a problem with the request made to a server.
            This is often due to incorrect syntax or missing information, for example an IMS-Org-Id header missing from the request.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request cannot be processed due to invalid syntax or missing information."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Access Denied. The user is not authorized to make the request."
        403:
          x-summary: Forbidden
          description: >
            You have been denied access to a resource due to lack of proper authorization or permissions.
          content: 
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "Access to the requested resource is forbidden."
        404:
          x-summary: Not Found
          description: Occurs if the dataset expiration cannot be found.
          content: 
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested resource could not be found."

    put:
      tags:
        - Dataset Expiration
      summary: Update an existing dataset expiration
      description: >
        Update the `displayName`, `description`, and/or `expiry` of a dataset expiration. 
        Note: If the expiry is changed it must be at least 24 hours in the future to avoid accidental deletions. This enforced 
        delay provides an opportunity to cancel or re-schedule the dataset expiration.
      operationId: updateTtl
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/ttlOrDatasetId'
      requestBody:
        description: A JSON payload containing the details used to update the dataset expiration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ttlPutPayload'
      responses:
        200:
          x-summary: Success
          description: The dataset expiration updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ttlResponseSingle"
        400:
          x-summary: Bad Request
          description: >
            This can occur if the JSON payload is invalid or missing required fields.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request payload is invalid or missing required fields."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Authentication credentials are missing or invalid."
        403:
          x-summary: Forbidden
          description: >
            This can occur if you do not have the necessary permissions to perform this action.
          content:
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "User does not have the necessary permissions."
        404:
          x-summary: Not Found
          description: >
            Occurs if the dataset expiration with the specified ID cannot be found.
          content:
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested dataset expiration could not be found."
        500:
          x-summary: Internal server error
          description: >
            This can occur if there is an issue on the server while processing the request.
          content:
            application/json:
              example:
                error_code: "500 INTERNAL SERVER ERROR"
                message: "An internal server error occurred while processing the request."

    patch:
      tags:
        - Dataset Expiration
      summary: Update an existing dataset expiration partially
      description: >
        Use this endpoint to change the expiry date of an existing dataset expiration.
      operationId: partialUpdateTtl
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/ttlId'
        - $ref: '#/components/parameters/productStatusDetails'
      requestBody:
        description: JSON payload containing the details of the dataset expiration to be updated partially
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ttlPatchPayload'
      responses:
        200:
          description: dataset expiration updated successfully
          content:
            application/json:
              example:
                message: "dataset expiration updated successfully."
        400:
          x-summary: Bad Request
          description: >
            This can occur if the JSON payload is invalid or missing required fields.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The request payload is invalid or missing required fields."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Authentication credentials are missing or invalid."
        403:
          x-summary: Forbidden
          description: >
            This can occur if you do not have the necessary permissions to perform this action.
          content:
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "User does not have the necessary permissions."
        404:
          x-summary: Not Found
          description: >
            Occurs if the dataset expiration with the specified ID cannot be found.
          content:
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested dataset expiration could not be found."
        500:
          x-summary: Internal server error
          description: >
            This can occur if there is an issue on the server while processing the request.
          content:
            application/json:
              example:
                error_code: "500 INTERNAL SERVER ERROR"
                message: "An internal server error occurred while processing the request."

    delete:
      tags:
        - Dataset Expiration
      summary: Cancel an existing dataset expiration
      description: >
        Use this endpoint to cancel an existing expiration for a dataset.
      operationId: deleteTtl
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/ttlId'
      responses:
        200:
          description: The dataset expiration was successfully cancelled. 
          content:
            application/json:
              example:
                message: "The dataset was successfully cancelled."
        400:
          x-summary: Bad Request
          description: >
            This can occur if the specified ID is invalid or missing required fields.
          content:
            application/json:
              example:
                error_code: "400 BAD REQUEST"
                message: "The specified ID is invalid or missing required fields."
        401:
          x-summary: Unauthorized
          description: >
            This can occur if the authentication credentials are missing or invalid.
          content:
            application/json:
              example:
                error_code: "401 UNAUTHORIZED"
                message: "Authentication credentials are missing or invalid."
        403:
          x-summary: Forbidden
          description: >
            This can occur if you do not have the necessary permissions to perform this action.
          content:
            application/json:
              example:
                error_code: "403 FORBIDDEN"
                message: "User does not have the necessary permissions."
        404:  
          x-summary: Not Found
          description: >
            Occurs if the dataset expiration with the specified ID cannot be found.
          content:
            application/json:
              example:
                error_code: "404 NOT FOUND"
                message: "The requested dataset expiration could not be found."
        500:
          x-summary: Internal server error
          description: >
            This can occur if there is an issue on the server while processing the request.
          content:
            application/json:
              example:
                error_code: "500 INTERNAL SERVER ERROR"
                message: "An internal server error occurred while processing the request."

  # Below here ...
  /workorder:
    get:
      tags:
        - Record Delete
      summary: List workorders
      description: List all workorders.
      operationId: getWorkOrders
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/requestId'
      responses:
        200:
          x-summary: "Success"
          description: "Returns the details of the specified dataset expiration."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workorderResponse"

    post:
      tags:
        - Record Delete
      summary: Create a workorder
      description: Create a new workorder.
      operationId: createWorkOrder
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/XApiKey'
        - $ref: '#/components/parameters/XImsOrgId'
        - $ref: '#/components/parameters/XSandboxName'
        - $ref: '#/components/parameters/ContentType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/workorderRequestBody"
      responses:
        201:
          x-summary: Created
          description: "A new record delete request was successfully created."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/workorderResponse"

  /workorder/{WORKORDER_ID}:
    get:
      tags:
        - Record Delete
      summary: Retrieve a workorder
      description: Retrieve a specific workorder by its ID.
      operationId: getWorkOrderById
      parameters:
        - name: workorderId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer {ACCESS_TOKEN}
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
            example: {API_KEY}
        - name: x-gw-ims-org-id
          in: header
          required: true
          schema:
            type: string
            example: {ORG_ID}
        - name: x-sandbox-name
          in: header
          required: true
          schema:
            type: string
            example: {SANDBOX_NAME}
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  placeholder:
                    type: string
                    example: placeholder

    put:
      tags:
        - Record Delete
      summary: Update a workorder
      description: Update a specific workorder by its ID.
      operationId: updateWorkOrderById
      parameters:
        - name: WORKORDER_ID
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: Bearer {ACCESS_TOKEN}
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
            example: {API_KEY}
        - name: x-gw-ims-org-id
          in: header
          required: true
          schema:
            type: string
            example: {ORG_ID}
        - name: x-sandbox-name
          in: header
          required: true
          schema:
            type: string
            example: {SANDBOX_NAME}
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                placeholder:
                  type: string
                  example: placeholder
      responses:
        '200':
          description: workorder updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  placeholder:
                    type: string
                    example: placeholder
# Up to here! ...

components:
  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
      description: >
        The access token which can be copied from your Experience Platform integration, prefixed with 'Bearer '. For more 
        information on how to obtain this value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
    XApiKey:
      name: X-Api-Key
      in: header
      required: true
      schema:
        type: string
      description: >
        The API key which can be copied from your Experience Platform integration. For more information on how to obtain this 
        value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
    XImsOrgId:
      name: X-IMs-Org-Id
      in: header
      required: true
      schema:
        type: string
      description: >
        The organization ID which can be copied from your Experience Platform integration. For more information on how to obtain 
        this value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
    XSandboxName:
      name: X-Sandbox-Name
      in: header
      required: true
      schema:
        type: string
      description: >
        All resources in Experience Platform are isolated to specific virtual sandboxes. Requests to Platform APIs require a 
        header that specifies the name of the sandbox in which the operation will take place.
    ContentType:
      name: Content-Type
      in: header
      description: The type of content being sent in the body of the request. Should be 'application/json'.
      required: true
      schema:
        type: string
    Accept:
      name: Accept
      in: header
      required: true
      schema:
        type: string
      description: >-
        All GET requests must include this header with the value of `application/json`.
    
    # Query Parameters
    
    quotaType: 
      in: query
      name: quotaType
      description:  >
        An optional query parameter that specifies the type of quota to retrieve. If no quotaType parameter is provided, all quota values are returned in the API response. 
        Accepted type values include:
          - `datasetExpirationQuota`: This object shows the number of concurrently active dataset expirations for your organization, and your total allowance of expirations.
          - `dailyConsumerDeleteIdentitiesQuota`: This object shows the total number of record delete requests made by your organization today and your total daily allowance.
              Note: Only accepted requests are counted. If a workorder is rejected because it fails validation, those identity deletions do not count against your quota.
          - `monthlyConsumerDeleteIdentitiesQuota`: This object shows the total number of record delete requests made by your organization this month and your total monthly allowance.
          - `monthlyUpdatedFieldIdentitiesQuota`: This object shows the total number of record updates requests made by your organization this month and your total monthly allowance.
      required: false
      schema:
        type: string
        enum:
            - datasetExpirationQuota
            - dailyConsumerDeleteIdentitiesQuota
            - monthlyConsumerDeleteIdentitiesQuota
            - monthlyUpdatedFieldIdentitiesQuota
    ttlOrDatasetId:
      name: ID
      in: path
      required: true
      schema:
        type: string
      description: >
        An ID to identify a dataset expiration to perform an action on. This can be either the dataset expiration ID or 
        the dataset ID.
    ttlId:
      name: ID
      in: path
      required: true
      schema:
        type: string
      description: An ID to identify a dataset expiration to perform an action on.
      example: ttlID=SD-c8c75921-2416-4be7-9cfd-9ab01de66c5f
    author:
      name: author
      in: query
      schema:
        type: string
      description: >
        Matches expirations whose created_by is a match for the search string. If the search string begins with `LIKE` or 
        `NOT LIKE`, the remainder is treated as an SQL search pattern. Otherwise, the entire search string is treated as a 
        literal string that must exactly match the entire content of a `created_by` field.
      example: author=LIKE %john%, author=John Q. Public
    cancelledDate:
      name: cancelledDate
      in: query
      schema:
        type: string
      description: >
        Matches expirations that were cancelled at any time in the indicated interval. This applies even if the expiration 
        was later reopened (by setting a new expiry for the same dataset).
      example: cancelledDate=2022-01-01
    cancelledToDate:
      name: cancelledToDate
      in: query
      schema:
        type: string
      description: Matches expirations that were cancelled at any time in the indicated interval. This applies even if the expiration was later reopened (by setting a new expiry for the same dataset).
      example: cancelledToDate=2022-01-01
    cancelledFromDate:
      name: cancelledFromDate
      in: query
      schema:
        type: string
      description: Matches expirations that were cancelled at any time in the indicated interval. This applies even if the expiration was later reopened (by setting a new expiry for the same dataset).
      example: cancelledFromDate=2022-01-01
    completedDate:
      name: completedDate
      in: query
      schema:
        type: string
      description: Matches expirations that were completed during the specified interval.
      example: completedDate=2021-11-11-06:00
    completedToDate:
      name: completedToDate
      in: query
      schema:
        type: string
      description: Matches expirations that were completed during the specified interval.
      example: completedToDate=2021-11-11-06:00
    completedFromDate:
      name: completedFromDate
      in: query
      schema:
        type: string
      description: Matches expirations that were completed during the specified interval.
      example: completedFromDate=2021-11-11-06:00
    createdDate:
      name: createdDate
      in: query
      schema:
        type: string
      description: Matches expirations that were created in the 24-hour window starting at the stated time. Note that dates without a time (like 2021-12-07) represent the datetime at the beginning of that day. Thus, createdDate=2021-12-07 refers to any expiration created on 7 December 2021, from 00:00:00 through 23:59:59.999999999 (UTC).
      example: createdDate=2021-12-07
    createdFromDate:
      name: createdFromDate
      in: query
      schema:
        type: string
      description: Matches expirations that were created at, or after, the indicated time.
      example: createdFromDate=2021-12-07T00:00:00Z
    createdToDate:
      name: createdToDate
      in: query
      schema:
        type: string
      description: Matches expirations that were created at, or before, the indicated time.
      example: createdToDate=2021-12-07T23:59:59.999999999Z
    datasetId:
      name: datasetId
      in: query
      schema:
        type: string
      description: Matches expirations that apply to specific dataset.
      example: datasetId=62b3925ff20f8e1b990a7434
    datasetName:
      name: datasetName
      in: query
      schema:
        type: string
      description: Matches expirations whose dataset name contains the provided search string. The match is case-insensitive.
      example: datasetName=Acme
    description:
      name: description
      in: query
      schema:
        type: string
      description: A description of the purpose of the expiration.
      example: description=Handle expiration of Acme information through the end of 2024.
    displayName:
      name: displayName
      in: query
      schema:
        type: string
      description: Matches expirations whose display name contains the provided search string. The match is case-insensitive.
      example: displayName=License Expiry
    executedDate:
      name: executedDate
      in: query
      schema:
        type: string
      description: Filters results based on an exact execution date, an ending date for execution, or a starting date for execution. They are used to retrieve data or records associated with the execution of an operation on a specific date, before a particular date, or after a particular date.
      example: executedDate=2023-02-05T19:34:40.383615Z
    executedFromDate:
      name: executedFromDate
      in: query
      schema:
        type: string
      description: Filters results based on an exact execution date, an ending date for execution, or a starting date for execution. They are used to retrieve data or records associated with the execution of an operation on a specific date, before a particular date, or after a particular date.
      example: executedFromDate=2023-02-05T19:34:40.383615Z
    executedToDate:
      name: executedToDate
      in: query
      schema:
        type: string
      description: Filters results based on an exact execution date, an ending date for execution, or a starting date for execution. They are used to retrieve data or records associated with the execution of an operation on a specific date, before a particular date, or after a particular date.
      example: executedToDate=2023-02-05T19:34:40.383615Z
    expiryDate:
      name: expiryDate
      in: query
      schema:
        type: string
      description: Matches expirations that are due to be executed, or have already been executed, during the specified interval.
      example: expiryDate=2099-01-01&expiryToDate=2100-01-01
    expiryToDate:
      name: expiryToDate
      in: query
      schema:
        type: string
      description: Matches expirations that are due to be executed, or have already been executed, during the specified interval.
      example: expiryToDate=2099-01-01&expiryFromDate=2100-01-01
    expiryFromDate:
      name: expiryFromDate
      in: query
      schema:
        type: string
      description: Matches expirations that are due to be executed, or have already been executed, during the specified interval.
      example: expiryFromDate=2099-01-01&expiryToDate=2100-01-01
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: An integer between 1 and 100 that indicates the maximum number of expirations to return. Defaults to 25.
      example: 50
              
    orderBy:
      name: orderBy
      in: query
      schema:
        type: string
      description: >
        The orderBy query parameter specifies the sorting order of the results returned by the API. Use it to arrange the 
        data based on one or more fields, either in ascending (ASC) or descending (DESC) order. Use the + or - prefix to 
        signify ASC, DESC respectively. The following values are accepted: `displayName`, `description`, `datasetName`, 
        `id`, `updatedBy`, `updatedAt`, `expiry`, `status`.
      example: -datasetName
    orgId:
      name: orgId
      in: query
      schema:
        type: string
      description: >
        Matches datasets expirations whose organization ID matches that of the parameter. This value defaults to that of 
        the `x-gw-ims-org-id` header. This parameter is ignored unless a service token is supplied in the request.
      example: orgId=885737B25DC460C50A49411B@AdobeOrg
    page:
      name: page
      in: query
      schema:
        type: integer
      description: An integer that indicates which page of expirations to return.
      example: 3
    sandboxName:
      name: sandboxName
      in: query
      schema:
        type: string
      description: >
        Matches dataset expirations whose sandbox name exactly matches the argument. Defaults to the sandbox name in the 
        request’s x-sandbox-name header. Use sandboxName=* to include dataset expirations from all sandboxes.
      example: sandboxName=dev1
    search:
      name: search
      in: query
      schema:
        type: string
      description: >
        Matches expirations where the specified string is an exact match for the expiration ID, or is contained in any of 
        these fields: `author`, `display name`, `description`, `display name`, `dataset name`.
      example: search=TESTING
    status:
      name: status
      in: query
      schema:
        type: string
      description: >
        A comma-separated list of statuses. When included, the response matches dataset expirations whose current status is among 
        those listed.
      example: status=pending,cancelled
    updatedDate:
      name: updatedDate
      in: query
      schema:
        type: string
      description: >
        Like `createdDate` / `createdFromDate` / `createdToDate`, but matches against a dataset expiration’s update time instead 
        of creation time. An expiration is considered updated on every edit, including when it is created, cancelled, or executed.
      example: updatedDate=2022-01-01
    updatedToDate:
      name: updatedToDate
      in: query
      schema:
        type: string
      description: >
        Like `createdDate` / `createdFromDate` / `createdToDate`, but matches against a dataset expiration’s update time instead 
        of creation time. An expiration is considered updated on every edit, including when it is created, cancelled, or executed.
      example: updatedToDate=2022-01-01
    updatedFromDate:
      name: updatedFromDate
      in: query
      schema:
        type: string
      description: >
        Like `createdDate` / `createdFromDate` / `createdToDate`, but matches against a dataset expiration’s update time instead 
        of creation time. An expiration is considered updated on every edit, including when it is created, cancelled, or executed.
      example: updatedFromDate=2022-01-01
    productStatusDetails:
      name: productStatusDetails
      in: query
      required: false
      schema:
        type: string
      description: >
        This parameter is only accepted when the expiration status is `executing`, or `completed`. Each element of the array contains 
        a `productName` and a `productStatus`. The `productName` will be either `Data Management`,  `Identity Service`, or 
        `Profile Service`. The `productStatus` will always be `success`.
    requestId:
      name: requestId
      in: query
      required: false
      schema:
        type: string
      description: >
        An optional workorder ID for a specific record delete request that you want to retrieve.

  schemas:
    ttlPutPayload:
      type: object
      properties:
        expiry:
          type: string
          example: "2030-12-31T23:59:59Z"
          description: >
            The expiry date and time in ISO 8601 format. If the string has no explicit zone offset, UTC is 
            assumed. This must be at least 24 hours in the future.
            A dataset expiration will be created with the specified timestamp.
        displayName:
          type: string
          example: "Delete Acme Data before 2025"
          description: "The display name for the dataset expiration."
        description:
          type: string
          example: "The Acme information in this dataset is licensed for our use through the end of 2024."
          description: "A description of the dataset expiration's purpose."
      required:
        - expiry
      example:
        datasetId: "5b020a27e7040801dedbf46e"
        expiry: "2030-12-31T23:59:59Z"
        displayName: "Delete Acme Data before 2025"
        description: "The Acme information in this dataset is licensed for our use through the end of 2024."

    ttlPatchPayload:
      type: object
      properties:
        expiry:
          type: string
          example: "2030-12-31T23:59:59Z"
          description: >
            Use the PATCH method to change the change the dataset expiration date.
            The expiry date and time in ISO 8601 format. If the string has no explicit zone offset, UTC is 
            assumed. This must be at least 24 hours in the future.
            A dataset expiration will be created with the specified timestamp.
      required:
        - expiry
      example:
        expiry: "2030-12-31T23:59:59Z"

    ttlPostPayload:
      type: object
      properties:
        datasetId:
          type: string
          example: "5b020a27e7040801dedbf46e"
          description: "The ID of the dataset to be impacted."
        expiry:
          type: string
          example: "2030-12-31T23:59:59Z"
          description: >
            The expiry date and time in ISO 8601 format. If the string has no explicit zone offset, UTC is 
            assumed. This must be at least 24 hours in the future.
            A dataset expiration will be created with the specified timestamp.
        displayName:
          type: string
          example: "Delete Acme Data before 2025"
          description: "The display name for the dataset expiration."
        description:
          type: string
          example: "The Acme information in this dataset is licensed for our use through the end of 2024."
          description: "A description of the dataset expiration's purpose."
      required:
        - datasetId
        - expiry
      example:
        datasetId: "5b020a27e7040801dedbf46e"
        expiry: "2030-12-31T23:59:59Z"
        displayName: "Delete Acme Data before 2025"
        description: "The Acme information in this dataset is licensed for our use through the end of 2024."

    quotaResponse:
      type: object
      properties:
        quotas:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "datasetExpirationQuota"
                description: "The data lifecycle job type."
              description:
                type: string
                example: "The consumed number of deleted identities in all workorder requests for the organization for today."
                description: "A description of the data lifecycle job type."
              consumed:
                type: integer
                example: 12
                description: >
                  The number of jobs of this type run in the current period. The object name indicates the quota period.
              quota:
                type: integer
                example: 50
                description: >
                  The allotment for this job type for your organization. For record deletions and updates, the quota represents the number 
                  of jobs that can be run for each monthly period. For dataset expirations, the quota represents the number of jobs that 
                  can be concurrently active at any given time.
          example:
            - name: "datasetExpirationQuota"
              description: "The number of concurrently active Expiration Dataset Delete in all workorder requests for the organization."
              consumed: 12
              quota: 50
            
            - name: "dailyConsumerDeleteIdentitiesQuota"
              description: "The consumed number of deleted identities in all workorder requests for the organization for today."
              consumed: 21
              quota: 600000
          
            - name: "monthlyConsumerDeleteIdentitiesQuota"
              description: "The consumed number of deleted identities in all workorder requests for the organization for this month."
              consumed: 832
              quota: 600000
          
            - name: "monthlyUpdatedFieldIdentitiesQuota"
              description: "The consumed number of updated identities in all workorder requests for the organization for this month."
              consumed: 0
              quota: 0
    
    ttlResponseMultiple:
      type: object
      description: An array of all the dataset expirations for your organization.
      properties:
        results:
          type: array
          description: An array that contains the details of the returned dataset expirations.
          items:
            type: object
            properties:
              ttlId:
                type: string
                example: "SD-42215a53-b79e-49bc-bd00-69f8a470329f"
                description: The ID of the dataset expiration.
              datasetId:
                type: string
                example: "66043e214ac58a2c9f9eb99f"
                description: The ID of the dataset associated with the dataset expiration.
              datasetName:
                type: string
                example: "E2E_Dataset_E2E_Identity_Map_Schema_5_1711554081377"
                description: The name of the dataset.
              sandboxName:
                type: string
                example: "hygiene-beta"
                description: The name of the sandbox associated with the dataset expiration.
              imsOrg:
                type: string
                example: "FB3C3EC6621DC3480A495EB2@AdobeOrg"
                description: The organization ID associated with the dataset expiration.
              status:
                type: string
                example: "executing"
                description: The status of the dataset expiration.
              expiry:
                type: string
                example: "2024-03-28T16:41:24.262521Z"
                description: The dataset's expiry date and time.
              updatedAt:
                type: string
                example: "2024-03-28T16:41:32.549939Z"
                description: The date and time the dataset expiration was last updated.
              updatedBy:
                type: string
                example: "c87fb98d-b537-4cb9-b1b0-9b74c8e30e2c@techacct.adobe.com <c87fb98d-b537-4cb9-b1b0-9b74c8e30e2c@techacct.adobe.com> C4A32114631F55D40A495CA7@techacct.adobe.com"
                description: The ID of the user who last updated the dataset expiration.
              displayName:
                type: string
                example: "E2E_Short_Expiry_1711554084262"
                description: The display name of the dataset expiration.
              description:
                type: string
                example: "E2E_Short_Expiry"
                description: A description of the dataset expiration's purpose.
        current_page:
          type: integer
          example: 0
          description: The current page number.
        total_pages:
          type: integer
          example: 6
          description: The total number of pages.
        total_count:
          type: integer
          example: 118
          description: The count of dataset expirations that matched the listing call’s parameters.

    ttlResponseSingle:
      type: object
      description: The dataset expirations details.
      properties:
        ttlId:
          type: string
          example: "SD-42215a53-b79e-49bc-bd00-69f8a470329f"
          description: The ID of the dataset expiration.
        datasetId:
          type: string
          example: "66043e214ac58a2c9f9eb99f"
          description: The ID of the dataset associated with the dataset expiration.
        datasetName:
          type: string
          example: "E2E_Dataset_E2E_Identity_Map_Schema_5_1711554081377"
          description: The name of the dataset associated with the dataset expiration.
        sandboxName:
          type: string
          example: "hygiene-beta"
          description: The name of the sandbox associated with the dataset expiration.
        imsOrg:
          type: string
          example: "FB3C3EC6621DC3480A495EB2@AdobeOrg"
          description: The organization ID associated with the expiration.
        status:
          type: string
          example: "executing"
          description: The status of the dataset expiration.
        expiry:
          type: string
          example: "2024-03-28T16:41:24.262521Z"
          description: The dataset's expiry date and time.
        updatedAt:
          type: string
          example: "2024-03-28T16:41:32.549939Z"
          description: The date and time the dataset expiration was last updated.
        updatedBy:
          type: string
          example: "c87fb98d-b537-4cb9-b1b0-9b74c8e30e2c@techacct.adobe.com <c87fb98d-b537-4cb9-b1b0-9b74c8e30e2c@techacct.adobe.com> C4A32114631F55D40A495CA7@techacct.adobe.com"
          description: The ID of the user who last updated the dataset expiration.
        displayName:
          type: string
          example: "E2E_Short_Expiry_1711554084262"
          description: The display name of the dataset expiration.
        description:
          type: string
          example: "E2E_Short_Expiry"
          description: A description of the dataset expiration's purpose.
    
    workorderResponse:
      type: object
      description: The workorder details.
      properties:
        workorderId:
          type: string
          example: "a15345b8-a2d6-4d6f-b33c-5b593e86439a"
          description: The ID of the deletion order. This can be used to look up the status of the deletion later.
        orgId:
          type: string
          example: "{ORG_ID}"
          description: Your organization ID.
        bundleId:
          type: string
          example: "BN-35c1676c-3b4f-4195-8d6c-7cf5aa21efdd"
          description: >
            The ID of the bundle this deletion order is associated with, used for debugging purposes. Multiple 
            deletion orders are bundled together to be processed by downstream services.
        action:
          type: string
          example: "identity-delete"
          description: The action to be performed by the workorder. For record deletes, the value is identity-delete.
        createdAt:
          type: string
          example: "2022-07-21T18:05:28.316029Z"
          description: The date and time the workorder was created.
        updatedAt:
          type: string
          example: "2022-07-21T17:59:43.217801Z"
          description: The date and time the workorder was last updated.
        status:
          type: string
          example: "received"
          description: The current status of the workorder.
        createdBy:
          type: string
          example: "{USER_ID}"
          description: The ID of the user who created the workorder.
        datasetId:
          type: string
          example: "c48b51623ec641a2949d339bad69cb15"
          description: The ID of the dataset that is subject to the request. If the request is for all datasets, the value will be set to `ALL`.
        displayName:
          type: string
          example: "Example Record Delete Request"
          description: The display name of the workorder.
        description:
          type: string
          example: "Cleanup identities required by Jira request 12345."
          description: A description of the workorder's purpose.

    workorderRequestBody:
      type: object
      description: >
        Depending on the value of the `datasetId` provided in the request payload, the API call will delete identities from all datasets 
        or a single dataset that you specify. 
      properties:
        action:
          type: string
          example: "delete_identity"
          description: The action to be performed. The value must be set to `delete_identity` for record deletes.
        datasetId:
          type: string
          example: "c48b51623ec641a2949d339bad69cb15"
          description: >
            If you are deleting from a single dataset, this value must be the ID of the dataset in question. If you are deleting from all datasets, 
            set the value to `ALL`.
            If you are specifying a single dataset, the dataset’s associated Experience Data Model (XDM) schema must have a primary identity defined. 
            If the dataset does not have a primary identity, then it must have an identity map in order to be modified by a Data Lifecycle request.
            If an identity map exists, it will be present as a top-level field named `identityMap`.
            Note that a dataset row may have many identities in its identity map, but only one can be marked as primary. "primary": true must be included 
            to force the ID to match a primary identity.
        displayName:
          type: string
          example: "Example Record Delete Request"
          description: The display name for the record delete request.
        description:
          type: string
          example: "Cleanup identities required by Jira request 12345."
          description: A description for the record delete request.
        identities:
          type: array
          description: >
            An array containing the identities of at least one user whose information you would like to delete. Each identity is comprised of an identity 
            namespace and a value:
            
            `namespace`: Contains a single string property, code, which represents the identity namespace.
            `id`: The identity value.
            If `datasetId` specifies a single dataset, each entity under identities must use the same identity namespace as the schema’s primary identity.
            If `datasetId` is set to ALL, the identities array is not constrained to any single namespace since each dataset might be different. However, your 
            requests are still constrained to the namespaces available to your organization, as reported by Identity Service.
          items:
            type: object
            properties:
              namespace:
                type: object
                properties:
                  code:
                    type: string
                    example: "email"
                    description: The identity namespace code.
              id:
                type: string
                example: "paul.anderson@example.com"
                description: The identity value.


