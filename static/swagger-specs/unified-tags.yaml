openapi: 3.0.1
info: 
  title: Unified Tags API
  version: "1.0"
  description: |-
    Use the Unified Tags API to create folders, tags, and tag cateogries, which let you better organize your business objects. 

    - **Related documentation**:
      - [Unified Tags documentation](https://experienceleague.adobe.com/en/docs/experience-platform/administrative-tags/api/overview)

    - **Visualize API calls with Postman (a free, third-party software)**:
      - [Real-time Customer Profile API Postman collection on GitHub](https://github.com/adobe/experience-platform-postman-samples/blob/master/apis/experience-platform/Real-time%20Customer%20Profile%20API.postman_collection.json)
      - [Video guide for creating the Postman environment](https://video.tv.adobe.com/v/28832)
      - [Steps for importing environments and collections in Postman](https://learning.getpostman.com/docs/postman/collection_runs/using_environments_in_collection_runs/)

    - **API paths**:
      - Gateway URL: https://<span>experience.adobe.io/

    - **Required headers**:
      - All calls require the headers `Authorization`, `x-gw-ims-org-id`, and `x-api-key`. For more information on how to obtain these values, see the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
      - All requests with a payload in the request body (such as POST, PUT, and PATCH calls) must include the header `Content-Type`. Accepted values specific to each call are provided in the call parameters.     

    - **API error handling**:
      - Refer to the Experience Platform API troubleshooting guide for [FAQs](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#faq), [API status codes](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#api-status-codes), and [request header errors](https://experienceleague.adobe.com/docs/experience-platform/landing/troubleshooting.html#request-header-errors).

servers: 
  - url: https://experience.adobe.io/
tags: 
- name: (NEW) Interactive API documentation
  description: You can now interact with the Experience Platform API endpoints directly from this API reference page. Get your [authentication credentials](http://www.adobe.com/go/platform-api-authentication-en) and use the **Try it** functionality in the right rail. Note that by using this functionality, you are making real API calls. Keep this in mind when you interact with production sandboxes.
- name: Folders
  description: Folders description.
- name: Tags
  description: Tags description.
- name: Tag categories
  description: description
paths: 
  /folder/{FOLDER_TYPE}:
    post: 
      tags: 
        -  Folders
      summary: Create a folder
      operationId: createFolder
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      requestBody:
        description: The request body to create the folder. 
        content: 
          "*/*":
            schema: 
              $ref: "#/components/schemas/createFolderBody"
        required: true
      responses: 
        200:
          x-summary: "Created"
          description: "A new folder was successfully created."
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/folder"
      
  /folder/{FOLDER_TYPE}/{FOLDER_ID}:
    get: 
      tags: 
        -  Folders
      summary: Retrieve a specified folder
      operationId: retrieveFolder
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/folder-id'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      responses: 
        200:
          x-summary: "Success"
          description: "Returns the specified folder"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/folder"
    patch: 
      tags: 
        -  Folders
      summary: Update a specific folder
      operationId: updateFolder
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/folder-id'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      requestBody: 
        description: "The request body to update the folder."
        content: 
          '*/*':
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/updateFolderBody'
        required: true
      responses: 
        200:
          x-summary: "Success"
          description: "The folder was successfully updated."
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/updatedFolder"
    delete: 
      tags: 
        -  Folders
      summary: Delete a specific folder
      operationId: deleteFolder
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/folder-id'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      responses: 
        200:
          x-summary: "Success"
          description: "The folder was successfully deleted."
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/deleteFolderResponse"
  /folder/{FOLDER_TYPE}/{FOLDER_ID}/subfolders:
    get: 
      tags: 
        -  Folders
      summary: Retrieve a folder's subfolders
      operationId: getSubfolders
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/folder-id'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      responses: 
        200:
          x-summary: Success
          description: "The list of subfolders was successfully retrieved."
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/foldersList'
  /folder/{FOLDER_TYPE}/{FOLDER_ID}/validate:
    get: 
      tags: 
        -  Folders
      summary: Validate a specific folder
      description: Use this endpoint to validate if a folder is eligible to have objects in it.
      operationId: validateFolder
      parameters: 
        - $ref: '#/components/parameters/folder-type'
        - $ref: '#/components/parameters/folder-id'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/x-sandbox-name'
      responses: 
        200:
          x-summary: "Success"
          description: "The folder was successfully validated."
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/folder"    
  /tagCategory:
    get:
      tags:
        - Tag categories
      summary: Retrieve tag categories
      operationId: retrieveTagCategories
      parameters:
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/limitTagCategories'
        - $ref: '#/components/parameters/propertyTagCategories'
        - $ref: '#/components/parameters/sortByTagCategories'
        - $ref: '#/components/parameters/sortOrderTagCategories'
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
      responses:
        200:
          x-summary: "Success"
          description: "A list of tag categories that belongs to the organization."
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/tagCategoriesList"
    post: 
      tags: 
        -  Tag categories
      summary: "Create a new tag category"
      operationId: createTagCategory
      parameters: 
        - $ref: '#/components/parameters/authorization'
        - $ref: '#/components/parameters/content-type'
        - $ref: '#/components/parameters/x-gw-ims-org-id'
        - $ref: '#/components/parameters/x-api-key'
      requestBody: 
        description: "The request body to create the tag category."
        content: 
          "*/*":
            schema: 
              $ref: "#/components/schemas/createTagCategoryBody"
        required: true
      responses: 
        200:
          x-summary: "Success"
          description: "The tag category was successfully created."
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/tagCategory"
      
components: 
  schemas:
    createFolderBody:
      type: object
      properties:
        name:
          type: string
          example: SampleFolder
        parentId:
          type: string
          example: 6a5e0927-1527-4abc-9993-376fd7067ca5
    folder:
      type: object
      properties: 
        id:
          type: string
          example: 83f8287c-767b-4106-b271-257282fd170e
        name:
          type: string
          example: SampleFolder
        noun:
          type: string
          example: dataset
        imsOrg:
          type: string
          example: '{ORG_ID}'
        sandboxId:
          type: string
          example: "{SANDBOX_ID}"
        sandboxName:
          type: string
          example: "prod"
        createdBy:
          type: string
          example: "{USER_ID}"
        createdAt:
          type: string
          example: "2023-10-01T08:47:06.192+00:00"
        modifiedBy:
          type: string
          example: "{USER_ID}"
        modifiedAt:
          type: string
          example: "2023-10-01T08:47:06.192+00:00"
        status:
          type: string
          example: "IN_USE"
        _links:
          type: object
          properties:
            self:
              type: object
              properties: 
                href:
                  type: string
                  example: "/folders/dataset/83f8287c-767b-4106-b271-257282fd170e"
    foldersList:
      type: object
      description: "A list of subfolders for the requested folder."
      properties: 
        id:
          type: string
          example: "c626b4f7-223b-4486-8900-00c266e31dd1"
        name:
          type: string
          example: "ParentFolder"
        noun:
          type: string
          example: "dataset"
        imsOrg:
          type: string
          example: "{IMS_ORG}"
        sandboxId:
          type: string
          example: "{SANDBOX_ID}"
        sandboxName:
          type: string
          example: "prod"
        createdBy:
          type: string
          example: "null"
        createdAt:
          type: string
          example: "2023-01-12T03:31:00.118+00:00"
        modifiedBy:
          type: string
          example: "null"
        modifiedAt:
          type: string
          example: "2023-01-13T05:47:06.718+00:00"
        "_links":
          type: object
          example: null
        children:
          type: array
          items: 
            $ref: "#/components/schemas/childFolder"
    childFolder:
      type: object
      allOf: 
        - $ref: "#/components/schemas/folder"
        - type: object
          properties: 
            name:
              type: string
              example: "ChildFolder"
            parentId:
              type: string
              example: "c626b4f7-223b-4486-8900-00c266e31dd1"
            children:
              type: array
              example: []
            "_links":
              type: object
              example: null
    updatedFolder:
      type: object
      allOf: 
        - $ref: "#/components/schemas/folder"
        - type: object
          properties: 
            name:
              type: string
              example: "RenamedSampleFolder"            
    updateFolderBody:
      type: object
      description: "The request body to update the folder."
      required:
        - op
        - path
        - value
      properties:
        op:
          type: string
          example: replace
          enum: 
            - replace
        path:
          type: string
          example: "/name"
        value:
          type: string
          example: "RenamedSampleFolder"
    deleteFolderResponse:
      type: object
      description: "A successful deletion response body."
      properties:
        message:
          type: string
          example: "delete request accepted successfully"
    tagCategory:
      type: object
      properties:
        id: 
          type: string
          example: e2b7c656-067b-4413-a366-adde0401df50
        name:
          type: string
          example: "Sample Tag Category"
        description:
          type: string
          example: "Sample tag category description"
        org:
          type: string
          example: "{ORG_ID}"
        createdBy:
          type: string
          example: "{USER_ID}"
        createdAt:
          type: string
          example: "1661752268000"
        modifiedBy:
          type: string
          example: "{USER_ID}"
        modifiedAt:
          type: string
          example: "1661752268000"
        tagCount:
          type: integer
          example: 0
    tagCategoriesList:
      type: object
      properties:
        "_page":
          type: object
          properties:
            count:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            property:
              type: array
              example: []
        "tags":
          type: array
          items: 
            $ref: "#/components/schemas/tagCategory"
    createTagCategoryBody:
      type: object
      properties:
        name:
          type: string
          example: "Sample Test Category"
        description:
          type: string
          example: "Sample test category description"
  parameters: 
    folder-type:
      name: FOLDER_TYPE
      in: path
      description: The type of folder you're retrieving. Supported values include `segments` and `datasets`.
      required: true
      schema:
        type: string      
    folder-id:
      name: FOLDER_ID
      in: path
      description: The ID of the folder you're retrieving.
      required: true
      schema:
        type: string
    authorization:
      name: Authorization
      in: header
      description: The access token which can be copied from your Experience Platform integration, prefixed with "Bearer ". For more information on how to obtain this value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
      required: true
      schema:
        type: string
    x-gw-ims-org-id:
      name: x-gw-ims-org-id
      in: header
      description: The Organization ID which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
      required: true
      schema:
        type: string
    x-api-key:
      name: x-api-key
      in: header
      description: The API key which can be copied from your Experience Platform integration. For more information on how to obtain this value, visit the [authentication tutorial](http://www.adobe.com/go/platform-api-authentication-en).
      required: true
      schema:
        type: string
    x-sandbox-name:
      name: x-sandbox-name
      in: header
      description: All resources in Experience Platform are isolated to specific virtual sandboxes. Requests to Platform APIs require a header that specifies the name of the sandbox in which the operation will take place. See the [sandboxes overview](https://adobe.com/go/sandbox-overview-en) for more information.
      required: true
      schema:
        type: string
    content-type:
      name: Content-Type
      in: header
      description: Type of content being sent in the body of the request. Should be 'application/json'.
      required: true
      schema:
        type: string
    start:
      name: start
      in: query
      description: The location where the list of results starts from. You can use this to indicate the starting index for pagination of results.	
      schema: 
        type: string
    limitTagCategories:
      name: limit
      in: query
      description: The maximum number of tag categories you want retrieved per page.	
      schema: 
        type: string
    propertyTagCategories:
      name: property
      in: query
      description: "The attribute you want to filter by when retrieving tag categories."
      schema: 
        type: string
    sortByTagCategories:
      name: sortBy
      in: query
      description: The order in which the tag categories are sorted by. Supported values include `name`, `createdAt`, and `modifiedAt`.	
      schema: 
        type: string
    sortOrderTagCategories:
      name: sortOrder
      in: query
      description: The direction in which the tag categories are sorted by. Supported values include `asc` and `desc`.
      schema: 
        type: string	